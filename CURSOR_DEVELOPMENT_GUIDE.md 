# –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤ Cursor

–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Cursor IDE.

## üéØ –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º

### –ß—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤–æ

‚úÖ **–ü–æ–ª–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞**
- –í—Å–µ –º–æ–¥—É–ª–∏ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã
- –ö–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
- –¢–µ—Å—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã
- Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞

‚úÖ **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**
- README.md - –æ—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- QUICKSTART.md - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
- EXAMPLES.md - –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- FAQ.md - —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- ARCHITECTURE.md - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å

üî® **–í–∞—à–∞ –∑–∞–¥–∞—á–∞:**
1. –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
2. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
5. –ù–∞—á–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (v1.1)

---

## üìÅ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞

### 1.1 –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É

```bash
mkdir youtube-transcriber
cd youtube-transcriber
```

### 1.2 –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π

```bash
# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–ø–∫–∏
mkdir -p src tests output temp logs models/whisper models/nllb

# –§–∞–π–ª—ã
touch src/__init__.py
touch src/main.py
touch src/config.py
touch src/logger.py
touch src/utils.py
touch src/downloader.py
touch src/transcriber.py
touch src/translator.py
touch src/document_writer.py

touch tests/__init__.py
touch tests/test_utils.py
touch tests/test_transcriber.py

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
touch requirements.txt
touch requirements-dev.txt
touch .env.example
touch .gitignore
touch Dockerfile
touch docker-compose.yml
touch setup.py

# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
touch README.md
touch QUICKSTART.md
touch EXAMPLES.md
touch FAQ.md
touch ARCHITECTURE.md
```

### 1.3 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É

```bash
tree -L 2
```

–î–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è:
```
youtube-transcriber/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py
‚îÇ   ‚îú‚îÄ‚îÄ config.py
‚îÇ   ‚îú‚îÄ‚îÄ logger.py
‚îÇ   ‚îú‚îÄ‚îÄ utils.py
‚îÇ   ‚îú‚îÄ‚îÄ downloader.py
‚îÇ   ‚îú‚îÄ‚îÄ transcriber.py
‚îÇ   ‚îú‚îÄ‚îÄ translator.py
‚îÇ   ‚îî‚îÄ‚îÄ document_writer.py
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ test_utils.py
‚îÇ   ‚îî‚îÄ‚îÄ test_transcriber.py
‚îú‚îÄ‚îÄ output/
‚îú‚îÄ‚îÄ temp/
‚îú‚îÄ‚îÄ logs/
‚îú‚îÄ‚îÄ models/
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ requirements-dev.txt
‚îú‚îÄ‚îÄ .env.example
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ setup.py
‚îî‚îÄ‚îÄ README.md
```

---

## üìã –®–∞–≥ 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞

### 2.1 –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤

–Ø —Å–æ–∑–¥–∞–ª –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª:

**–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:**
1. `src/__init__.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "src/__init__.py"
2. `src/config.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "src/config.py"
3. `src/logger.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "src/logger.py"
4. `src/utils.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "src/utils.py"
5. `src/downloader.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "src/downloader.py"
6. `src/transcriber.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "src/transcriber.py"
7. `src/translator.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "src/translator.py"
8. `src/document_writer.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "src/document_writer.py"
9. `src/main.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "src/main.py"

**–¢–µ—Å—Ç—ã:**
10. `tests/test_utils.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "tests/test_utils.py"
11. `tests/test_transcriber.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "tests/test_transcriber.py"

**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
12. `requirements.txt` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "requirements.txt"
13. `requirements-dev.txt` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "requirements-dev.txt"
14. `.env.example` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ ".env.example"
15. `.gitignore` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ ".gitignore"
16. `Dockerfile` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "Dockerfile"
17. `docker-compose.yml` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "docker-compose.yml"
18. `setup.py` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "setup.py"

**–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:**
19. `README.md` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "README.md"
20. `QUICKSTART.md` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "QUICKSTART.md"
21. `EXAMPLES.md` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "EXAMPLES.md"
22. `FAQ.md` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "FAQ.md"
23. `ARCHITECTURE.md` ‚Üê –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "ARCHITECTURE.md"

### 2.2 –°–æ–∑–¥–∞–π—Ç–µ tests/__init__.py

```python
# tests/__init__.py
"""
–¢–µ—Å—Ç—ã –¥–ª—è YouTube Transcriber
"""
```

---

## üîß –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Cursor

### 3.1 –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Cursor

```bash
cursor youtube-transcriber
```

–∏–ª–∏ —á–µ—Ä–µ–∑ GUI: File ‚Üí Open Folder

### 3.2 –°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ

–í —Ç–µ—Ä–º–∏–Ω–∞–ª–µ Cursor (Ctrl+`):

```bash
# –°–æ–∑–¥–∞–Ω–∏–µ venv
python -m venv venv

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è (macOS/Linux)
source venv/bin/activate

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è (Windows)
# venv\Scripts\activate
```

### 3.3 –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Python interpreter –≤ Cursor

1. Cmd+Shift+P (macOS) –∏–ª–∏ Ctrl+Shift+P (Windows/Linux)
2. –ù–∞–π–¥–∏—Ç–µ "Python: Select Interpreter"
3. –í—ã–±–µ—Ä–∏—Ç–µ `./venv/bin/python`

### 3.4 –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg

**macOS:**
```bash
brew install ffmpeg
```

**Linux:**
```bash
sudo apt update && sudo apt install ffmpeg
```

**Windows:**
- –°–∫–∞—á–∞–π—Ç–µ —Å ffmpeg.org
- –î–æ–±–∞–≤—å—Ç–µ –≤ PATH

### 3.5 –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

```bash
pip install --upgrade pip
pip install -r requirements.txt
pip install -r requirements-dev.txt  # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
```

‚è±Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç 5-10 –º–∏–Ω—É—Ç

---

## üß™ –®–∞–≥ 4: –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### 4.1 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã

```bash
python -c "import src; print('OK')"
```

### 4.2 –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–ø—Ä–∞–≤–∫—É

```bash
python -m src.main --help
```

–î–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.

### 4.3 –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã

```bash
# –í—Å–µ —Ç–µ—Å—Ç—ã
pytest tests/

# –° coverage
pytest --cov=src tests/

# Verbose mode
pytest -v tests/
```

### 4.4 –ü–µ—Ä–≤—ã–π —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ:

```bash
python -m src.main \
    --url "https://www.youtube.com/watch?v=dQw4w9WgXcQ" \
    --transcribe whisper_base
```

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∏—Ç –º–æ–¥–µ–ª–∏ (~2-3GB)

---

## üîç –®–∞–≥ 5: –†–∞–±–æ—Ç–∞ –≤ Cursor

### 5.1 –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Cursor

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:
- Python (Microsoft)
- Pylance
- Black Formatter
- autoDocstring
- GitLens

### 5.2 –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–°–æ–∑–¥–∞–π—Ç–µ `.vscode/settings.json`:

```json
{
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": false,
    "python.linting.flake8Enabled": true,
    "python.formatting.provider": "black",
    "editor.formatOnSave": true,
    "python.testing.pytestEnabled": true,
    "python.testing.unittestEnabled": false,
    "[python]": {
        "editor.rulers": [88],
        "editor.tabSize": 4
    }
}
```

### 5.3 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Cursor AI

**–ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è Cursor:**

1. **–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–¥–∞:**
```
Explain how the transcriber.py module works
```

2. **–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥:**
```
Refactor the translate_text method to improve readability
```

3. **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:**
```
Add support for processing local audio files to main.py
```

4. **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:**
```
Generate docstrings for all methods in utils.py
```

5. **–¢–µ—Å—Ç—ã:**
```
Write unit tests for the sanitize_filename function
```

### 5.4 Debugging –≤ Cursor

–°–æ–∑–¥–∞–π—Ç–µ `.vscode/launch.json`:

```json
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Main Module",
            "type": "python",
            "request": "launch",
            "module": "src.main",
            "args": [
                "--url", "https://youtube.com/watch?v=...",
                "--transcribe", "whisper_base"
            ],
            "console": "integratedTerminal"
        },
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal"
        },
        {
            "name": "Python: Pytest",
            "type": "python",
            "request": "launch",
            "module": "pytest",
            "args": [
                "tests/",
                "-v"
            ],
            "console": "integratedTerminal"
        }
    ]
}
```

---

## üöÄ –®–∞–≥ 6: –ù–∞—á–∞–ª–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ v1.1

### Roadmap –¥–ª—è v1.1

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:**

1. ‚úÖ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤**
   - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É `--input_audio`
   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤: mp3, wav, m4a, flac

2. ‚úÖ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤**
   - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É `--input_text`
   - –ü–∞—Ä—Å–∏–Ω–≥ docx —á–µ—Ä–µ–∑ python-docx
   - –ü–∞—Ä—Å–∏–Ω–≥ markdown

3. ‚úÖ **Whisper Small –º–æ–¥–µ–ª—å**
   - –î–æ–±–∞–≤–∏—Ç—å –≤ TranscribeOptions
   - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏

4. ‚úÖ **–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ**
   - –î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ (JSON option)

### –ü–ª–∞–Ω —Ä–∞–±–æ—Ç—ã

**–ù–µ–¥–µ–ª—è 1: –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã**

```python
# TODO –≤ main.py
def process_audio_file(
    audio_path: Path,
    transcribe_method: str,
    translate_methods: Optional[list[str]] = None
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
    # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    # 2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    # 3. –ü–µ—Ä–µ–≤–æ–¥ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    pass
```

**–ù–µ–¥–µ–ª—è 2: –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã**

```python
# TODO –≤ translator.py –∏–ª–∏ –Ω–æ–≤–æ–º –º–æ–¥—É–ª–µ
def process_text_file(
    text_path: Path,
    translate_methods: list[str]
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
    # 1. –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ (docx/md)
    # 2. –ü–µ—Ä–µ–≤–æ–¥
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    pass
```

**–ù–µ–¥–µ–ª—è 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**
- –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
- –û–±–Ω–æ–≤–∏—Ç—å README
- –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã

---

## üí° –°–æ–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Git

```bash
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
git init

# –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
git add .
git commit -m "Initial commit: MVP v1.0"

# –°–æ–∑–¥–∞–π—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ v1.1
git checkout -b feature/v1.1-local-files
```

### –†–∞–±–æ—Ç–∞–π—Ç–µ —Å –≤–µ—Ç–∫–∞–º–∏

```bash
# –î–ª—è –∫–∞–∂–¥–æ–π —Ñ–∏—á–∏ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞
git checkout -b feature/audio-file-support
git checkout -b feature/text-file-support
git checkout -b feature/whisper-small
```

### –ü–∏—à–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ –∫–æ–¥–æ–º (TDD)

```python
# –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç
def test_process_audio_file():
    result = process_audio_file("test.mp3", "whisper_base")
    assert result is not None

# –ü–æ—Ç–æ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
def process_audio_file(path, method):
    # implementation
    pass
```

### –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ type hints

```python
from typing import Optional, List, Tuple
from pathlib import Path

def process_video(
    url: str,
    transcribe_method: str,
    translate_methods: Optional[List[str]] = None
) -> Tuple[Path, Path]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    
    Args:
        url: URL –≤–∏–¥–µ–æ
        transcribe_method: –ú–µ—Ç–æ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è
        translate_methods: –ú–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞
        
    Returns:
        –ü—É—Ç–∏ –∫ docx –∏ md —Ñ–∞–π–ª–∞–º
    """
    pass
```

### –õ–æ–≥–∏—Ä—É–π—Ç–µ –≤—Å—ë

```python
from src.logger import logger

logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
logger.warning("–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", exc_info=True)
```

---

## üéì –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á –¥–ª—è –Ω–∞—á–∞–ª–∞

### –ó–∞–¥–∞—á–∞ 1: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤

**–®–∞–≥ 1:** –û–±–Ω–æ–≤–∏—Ç–µ `main.py`

```python
# –í —Ñ—É–Ω–∫—Ü–∏–∏ validate_args –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
if args.input_audio:
    if not Path(args.input_audio).exists():
        logger.error(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input_audio}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    valid_extensions = ['.mp3', '.wav', '.m4a', '.flac']
    if not any(args.input_audio.endswith(ext) for ext in valid_extensions):
        logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ")
        return False
```

**–®–∞–≥ 2:** –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏

```python
def process_audio_file(
    audio_path: str,
    transcribe_method: str,
    translate_methods: Optional[list[str]] = None,
    with_speakers: bool = False
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
    logger.info("=" * 60)
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞")
    logger.info("=" * 60)
    
    audio_path = Path(audio_path)
    
    # 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    file_title = audio_path.stem
    
    # 2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("\n[1/3] –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")
    transcriber = Transcriber(method=transcribe_method)
    transcription_segments = transcriber.transcribe(
        audio_path,
        language=None,
        with_speakers=with_speakers
    )
    
    # 3. –ü–µ—Ä–µ–≤–æ–¥ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    translation_segments = None
    translate_method_str = ""
    
    if translate_methods:
        logger.info("\n[2/3] –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞...")
        original_text = transcriber.segments_to_text(transcription_segments)
        source_lang = detect_language(original_text)
        
        if source_lang == "en":
            translate_method = translate_methods[0]
            translate_method_str = translate_method
            
            translator = Translator(method=translate_method)
            translation_segments = translator.translate_segments(
                transcription_segments,
                source_lang="en",
                target_lang="ru"
            )
        else:
            logger.info("–ê—É–¥–∏–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    logger.info("\n[3/3] –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    writer = DocumentWriter()
    docx_path, md_path = writer.create_from_segments(
        title=file_title,
        transcription_segments=transcription_segments,
        translation_segments=translation_segments,
        transcribe_method=transcribe_method,
        translate_method=translate_method_str,
        with_timestamps=True
    )
    
    logger.info("\n" + "=" * 60)
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    logger.info(f"  - {docx_path}")
    logger.info(f"  - {md_path}")
    logger.info("=" * 60)
```

**–®–∞–≥ 3:** –î–æ–±–∞–≤—å—Ç–µ –≤ main()

```python
# –í —Ñ—É–Ω–∫—Ü–∏–∏ main() –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL
elif args.input_audio:
    process_audio_file(
        audio_path=args.input_audio,
        transcribe_method=args.transcribe,
        translate_methods=translate_methods,
        with_speakers=args.speakers
    )
```

**–®–∞–≥ 4:** –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ

```bash
# –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
python -m src.main --input_audio test.mp3 --transcribe whisper_base
```

---

### –ó–∞–¥–∞—á–∞ 2: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤

**–®–∞–≥ 1:** –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º

–°–æ–∑–¥–∞–π—Ç–µ `src/text_processor.py`:

```python
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
"""
from pathlib import Path
from typing import Optional
from docx import Document as DocxDocument
import re

from .logger import logger


class TextProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    def read_docx(self, path: Path) -> str:
        """
        –ß—Ç–µ–Ω–∏–µ DOCX —Ñ–∞–π–ª–∞
        
        Args:
            path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –¢–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
        """
        logger.info(f"–ß—Ç–µ–Ω–∏–µ DOCX —Ñ–∞–π–ª–∞: {path}")
        doc = DocxDocument(path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        paragraphs = []
        for para in doc.paragraphs:
            text = para.text.strip()
            if text:
                paragraphs.append(text)
        
        return '\n\n'.join(paragraphs)
    
    def read_markdown(self, path: Path) -> str:
        """
        –ß—Ç–µ–Ω–∏–µ Markdown —Ñ–∞–π–ª–∞
        
        Args:
            path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –¢–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
        """
        logger.info(f"–ß—Ç–µ–Ω–∏–µ Markdown —Ñ–∞–π–ª–∞: {path}")
        with open(path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # –ù–æ –æ–±—ã—á–Ω–æ NLLB —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
        return content
    
    def read_text_file(self, path: Path) -> str:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        
        Args:
            path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –¢–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
        """
        if path.suffix.lower() == '.docx':
            return self.read_docx(path)
        elif path.suffix.lower() in ['.md', '.markdown']:
            return self.read_markdown(path)
        elif path.suffix.lower() == '.txt':
            with open(path, 'r', encoding='utf-8') as f:
                return f.read()
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {path.suffix}")
```

**–®–∞–≥ 2:** –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ `main.py`

```python
def process_text_file(
    text_path: str,
    translate_methods: list[str]
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
    logger.info("=" * 60)
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")
    logger.info("=" * 60)
    
    from .text_processor import TextProcessor
    
    text_path = Path(text_path)
    
    # 1. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    logger.info("\n[1/2] –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
    processor = TextProcessor()
    text = processor.read_text_file(text_path)
    
    logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    source_lang = detect_language(text)
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {source_lang}")
    
    if source_lang == "ru":
        logger.error("–¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        sys.exit(1)
    
    # 3. –ü–µ—Ä–µ–≤–æ–¥
    logger.info("\n[2/2] –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞...")
    translate_method = translate_methods[0]
    translator = Translator(method=translate_method)
    translated_text = translator.translate_text(
        text,
        source_lang=source_lang,
        target_lang="ru"
    )
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    writer = DocumentWriter()
    
    sections = [{
        'title': '–ü–µ—Ä–µ–≤–æ–¥',
        'method': translate_method,
        'content': translated_text
    }]
    
    docx_path, md_path = writer.create_documents(
        title=text_path.stem,
        sections=sections
    )
    
    logger.info("\n" + "=" * 60)
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    logger.info(f"  - {docx_path}")
    logger.info(f"  - {md_path}")
    logger.info("=" * 60)
```

**–®–∞–≥ 3:** –û–±–Ω–æ–≤–∏—Ç–µ main()

```python
elif args.input_text:
    if not translate_methods:
        logger.error("–î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞")
        sys.exit(1)
    
    process_text_file(
        text_path=args.input_text,
        translate_methods=translate_methods
    )
```

---

### –ó–∞–¥–∞—á–∞ 3: –î–æ–±–∞–≤–∏—Ç—å Whisper Small

**–û–±–Ω–æ–≤–∏—Ç–µ `transcriber.py`:**

```python
def _load_model(self):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper"""
    if self.model is not None:
        return
    
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper ({self.method})...")
    
    if self.method == TranscribeOptions.WHISPER_BASE:
        model_name = "base"
    elif self.method == TranscribeOptions.WHISPER_SMALL:
        model_name = "small"  # –î–æ–±–∞–≤–ª–µ–Ω–æ!
    elif self.method == TranscribeOptions.WHISPER_OPENAI_API:
        raise NotImplementedError("OpenAI API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ v2.0")
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {self.method}")
    
    self.model = whisper.load_model(
        model_name,
        device=self.device,
        download_root=str(settings.WHISPER_MODEL_DIR)
    )
    logger.info("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
```

---

## üêõ Debugging —Å–æ–≤–µ—Ç—ã

### –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IPython –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

```python
# –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–¥ –≥–¥–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
import IPython; IPython.embed()
```

### –õ–æ–≥–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

```python
logger.debug(f"Segments count: {len(segments)}")
logger.debug(f"First segment: {segments[0]}")
```

### –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ breakpoints –≤ Cursor

–ü–æ—Å—Ç–∞–≤—å—Ç–µ breakpoint (F9) –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ (F5)

---

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

### Checklist –¥–ª—è v1.1

- [ ] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
  - [ ] –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
  - [ ] –ü–æ–¥–¥–µ—Ä–∂–∫–∞ mp3, wav, m4a, flac
  - [ ] –¢–µ—Å—Ç—ã
  - [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

- [ ] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
  - [ ] TextProcessor –º–æ–¥—É–ª—å
  - [ ] –ü–æ–¥–¥–µ—Ä–∂–∫–∞ docx
  - [ ] –ü–æ–¥–¥–µ—Ä–∂–∫–∞ markdown
  - [ ] –¢–µ—Å—Ç—ã
  - [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

- [ ] Whisper Small –º–æ–¥–µ–ª—å
  - [ ] –î–æ–±–∞–≤–ª–µ–Ω –≤ TranscribeOptions
  - [ ] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
  - [ ] –¢–µ—Å—Ç—ã
  - [ ] –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞

- [ ] –£–ª—É—á—à–µ–Ω–∏—è
  - [ ] –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤
  - [ ] –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  - [ ] –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  - [ ] Graceful shutdown (Ctrl+C)

---

## üìù –§–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º

‚úÖ **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å—ë –≥–æ—Ç–æ–≤–æ:**

- [ ] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞
- [ ] –í–µ—Å—å –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
- [ ] –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
- [ ] FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
- [ ] –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (`pip install -r requirements.txt`)
- [ ] –¢–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è (`pytest tests/`)
- [ ] –ü–µ—Ä–≤—ã–π —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
- [ ] Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
- [ ] `.env` —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω (—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ `.env.example`)
- [ ] Cursor –Ω–∞—Å—Ç—Ä–æ–µ–Ω (interpreter, extensions)

---

## üöÄ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É!

**–í—ã –≥–æ—Ç–æ–≤—ã!** –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å:

1. ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π MVP (v1.0)
2. ‚úÖ –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
3. ‚úÖ –ü–æ–Ω—è—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è v1.1
4. ‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
5. ‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**

1. –ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Whisper Small)
2. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Å—Ç ‚Üí –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ ‚Üí –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç
3. –ö–æ–º–º–∏—Ç—å—Ç–µ —á–∞—Å—Ç–æ: `git commit -m "Add whisper small support"`
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Cursor AI –¥–ª—è –ø–æ–º–æ—â–∏
5. –û–±–Ω–æ–≤–ª—è–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –º–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

**–£–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üéâ**

---

## üí¨ –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ `logs/`
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å `LOG_LEVEL=DEBUG`
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ FAQ.md
4. –°–æ–∑–¥–∞–π—Ç–µ issue —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã

---

**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** –û–∫—Ç—è–±—Ä—å 2024