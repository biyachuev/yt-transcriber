# Development Guide for Cursor

Step-by-step instructions for setting up the project inside Cursor IDE.

## 🎯 Before you start

### Already prepared

✅ **Complete project architecture**
- Modules designed and implemented
- Code documented
- Test suite available
- Docker configuration ready

✅ **Documentation**
- README.md — main guide
- QUICKSTART.md — quick reference
- EXAMPLES.md — usage examples
- FAQ.md — frequently asked questions
- ARCHITECTURE.md — system design

### Your tasks

1. Create the project structure
2. Copy the provided source files
3. Install dependencies
4. Run the tests
5. Start working on the extended release (v1.1)

---

## 📁 Step 1: create the project skeleton

### 1.1 Root folder

```bash
mkdir youtube-transcriber
cd youtube-transcriber
```

### 1.2 Directory layout

```bash
# Core folders
mkdir -p src tests output temp logs models/whisper models/nllb

# Core modules
touch src/__init__.py src/main.py src/config.py src/logger.py src/utils.py       src/downloader.py src/transcriber.py src/translator.py src/document_writer.py

# Tests
touch tests/__init__.py tests/test_utils.py tests/test_transcriber.py

# Config files
touch requirements.txt requirements-dev.txt .env.example .gitignore       Dockerfile docker-compose.yml setup.py

# Documentation
touch README.md QUICKSTART.md EXAMPLES.md FAQ.md ARCHITECTURE.md
```

### 1.3 Verify structure

```bash
tree -L 2
```

Expected output:
```
youtube-transcriber/
├── src/
│   ├── __init__.py
│   ├── main.py
│   ├── config.py
│   ├── logger.py
│   ├── utils.py
│   ├── downloader.py
│   ├── transcriber.py
│   ├── translator.py
│   └── document_writer.py
├── tests/
│   ├── __init__.py
│   ├── test_utils.py
│   └── test_transcriber.py
├── output/
├── temp/
├── logs/
├── models/
├── requirements.txt
├── requirements-dev.txt
├── .env.example
├── .gitignore
├── Dockerfile
├── docker-compose.yml
├── setup.py
└── README.md
```

---

## 📋 Step 2: copy source files

All artefacts are prepared for you. Copy the contents into the matching files.

**Core modules**
1. `src/__init__.py`
2. `src/config.py`
3. `src/logger.py`
4. `src/utils.py`
5. `src/downloader.py`
6. `src/transcriber.py`
7. `src/translator.py`
8. `src/document_writer.py`
9. `src/main.py`

**Tests**
10. `tests/test_utils.py`
11. `tests/test_transcriber.py`

**Configuration**
12. `requirements.txt`
13. `requirements-dev.txt`
14. `.env.example`
15. `.gitignore`
16. `Dockerfile`
17. `docker-compose.yml`
18. `setup.py`

**Documentation**
19. `README.md`
20. `QUICKSTART.md`
21. `EXAMPLES.md`
22. `FAQ.md`
23. `ARCHITECTURE.md`

### 2.2 Prepare `tests/__init__.py`

```python
"""Test package initialisation."""
```

---

## 🧪 Step 3: install dependencies

### 3.1 Runtime dependencies

```bash
pip install -r requirements.txt
```

### 3.2 Development dependencies

```bash
pip install -r requirements-dev.txt
```

### 3.3 Optional tools

```bash
pip install pre-commit
pre-commit install
```

---

## ✅ Step 4: run the tests

```bash
pytest tests/
```

- Expect ~139 tests to pass
- Coverage report: `pytest --cov=src tests/`

---

## 🚀 Step 5: feature development (v1.1 roadmap)

Focus areas for the extended release:

1. **OpenAI Whisper & Translation APIs**
   - Add client wrappers
   - Implement CLI flags (`--transcribe whisper_openai_api`, `--translate openai_api`)

2. **Speaker diarisation**
   - Integrate `pyannote.audio`
   - Extend `TranscriptionSegment` with speaker labels
   - Update document writer to display speaker names

3. **Batch processing**
   - Add CLI flags for folder / playlist processing
   - Provide progress feedback in logs

4. **Improved UX**
   - English-first documentation (README, FAQ, QUICKSTART)
   - Clear logging in English
   - Additional troubleshooting tips

---

## 🧭 Tips for working in Cursor

- Use the built-in terminal for running CLI commands
- Rely on `Ctrl/Cmd + P` to jump between modules quickly
- Use multi-cursor editing for repeated patterns (e.g., log messages)
- Enable linting and type checking to surface issues inline
- Monitor the `logs/` folder while debugging

---

Happy hacking!
