"""
–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ: python calibrate.py [whisper_base|whisper_small]
"""
import time
from pathlib import Path
import subprocess
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
script_dir = Path(__file__).parent
project_root = script_dir if (script_dir / "src").exists() else script_dir.parent
sys.path.insert(0, str(project_root))

from src.transcriber import Transcriber
from src.translator import Translator
from src.utils import detect_language
from src.config import settings, TranscribeOptions

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò
# ============================================================================

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if len(sys.argv) > 1:
    MODEL = sys.argv[1]
    if MODEL not in ["whisper_base", "whisper_small"]:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {MODEL}")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python calibrate.py [whisper_base|whisper_small]")
        sys.exit(1)
else:
    MODEL = "whisper_base"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

print("=" * 70)
print("‚è±Ô∏è  –ö–ê–õ–ò–ë–†–û–í–ö–ê –û–¶–ï–ù–ö–ò –í–†–ï–ú–ï–ù–ò")
print("=" * 70)
print(f"üéØ –ú–æ–¥–µ–ª—å: {MODEL}")
print()

# ============================================================================
# –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
# ============================================================================

temp_dir = project_root / "temp"

if not temp_dir.exists():
    print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è temp/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {temp_dir}")
    print("\nüí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:")
    print("   ffmpeg -i temp/your_audio.mp3 -t 30 temp/test.mp3")
    sys.exit(1)

# –ò—â–µ–º test.mp3 –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π mp3
test_files = list(temp_dir.glob("test*.mp3"))
if not test_files:
    test_files = list(temp_dir.glob("*.mp3"))

if not test_files:
    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ mp3 —Ñ–∞–π–ª–æ–≤ –≤ {temp_dir}")
    print("\nüí° –°–∫–∞—á–∞–π—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:")
    print("   python -m src.main --url 'YOUTUBE_URL' --transcribe whisper_base")
    sys.exit(1)

audio_path = test_files[0]
print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {audio_path.name}")
print(f"üìÅ –ü—É—Ç—å: {audio_path}")

# ============================================================================
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# ============================================================================

try:
    result = subprocess.run(
        ['ffprobe', '-v', 'error', '-show_entries', 
         'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1',
         str(audio_path)],
        capture_output=True,
        text=True,
        check=True
    )
    duration = float(result.stdout.strip())
except subprocess.CalledProcessError:
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: brew install ffmpeg")
    sys.exit(1)
except ValueError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞")
    sys.exit(1)

print(f"üìè –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.1f} —Å–µ–∫—É–Ω–¥ ({duration/60:.1f} –º–∏–Ω—É—Ç)")
print()

# ============================================================================
# –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è
# ============================================================================

print("=" * 70)
print(f"üìù –¢–ï–°–¢ –¢–†–ê–ù–°–ö–†–ò–ë–ò–†–û–í–ê–ù–ò–Ø ({MODEL})")
print("=" * 70)
print()

print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {MODEL}...")
transcriber = Transcriber(method=MODEL)
print(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {transcriber.device}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
model_info = {
    "whisper_base": {
        "params": "74M –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
        "size": "~150 MB",
        "quality": "—Ö–æ—Ä–æ—à–µ–µ",
        "speed": "–±—ã—Å—Ç—Ä–æ"
    },
    "whisper_small": {
        "params": "244M –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", 
        "size": "~500 MB",
        "quality": "–æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ",
        "speed": "–º–µ–¥–ª–µ–Ω–Ω–µ–µ"
    }
}

info = model_info.get(MODEL, {})
if info:
    print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {info['params']}")
    print(f"   –†–∞–∑–º–µ—Ä: {info['size']}")
    print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {info['quality']}")
    print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {info['speed']}")
print()

print("üéµ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ...")
print("   (–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏–∑-–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏)")
start_time = time.time()

try:
    segments = transcriber.transcribe(audio_path, language=None)
    transcribe_time = time.time() - start_time
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    sys.exit(1)

transcribe_ratio = transcribe_time / duration

print()
print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {transcribe_time:.1f} —Å–µ–∫—É–Ω–¥")
print(f"   –°–æ–∑–¥–∞–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments)}")
print(f"   üìä –ú–ù–û–ñ–ò–¢–ï–õ–¨: {transcribe_ratio:.2f}x")
print()

if transcribe_ratio < 0.5:
    print("   üöÄ –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ! (–º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)")
elif transcribe_ratio < 1.0:
    print("   ‚ú® –ë—ã—Å—Ç—Ä–æ! (–±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)")
elif transcribe_ratio < 1.5:
    print("   üëç –ù–æ—Ä–º–∞–ª—å–Ω–æ (–ø—Ä–∏–º–µ—Ä–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)")
elif transcribe_ratio < 2.0:
    print("   üê¢ –ú–µ–¥–ª–µ–Ω–Ω–æ–≤–∞—Ç–æ (1.5-2x —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)")
else:
    print("   üêå –ú–µ–¥–ª–µ–Ω–Ω–æ (–±–æ–ª—å—à–µ 2x —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)")

# ============================================================================
# –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
# ============================================================================

print()
print("=" * 70)
print("üåç –¢–ï–°–¢ –ü–ï–†–ï–í–û–î–ê")
print("=" * 70)
print()

original_text = transcriber.segments_to_text(segments)
detected_lang = detect_language(original_text)

print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {detected_lang}")
print()

if detected_lang == "ru":
    print("‚ö†Ô∏è  –¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    print("   –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")
    translate_ratio = 0.0
else:
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ NLLB...")
    translator = Translator(method="NLLB")
    print()
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥...")
    start_time = time.time()
    
    try:
        translation_segments = translator.translate_segments(
            segments, 
            source_lang=detected_lang, 
            target_lang="ru"
        )
        translate_time = time.time() - start_time
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        translate_time = 0
        translate_ratio = 0.0
    else:
        translate_ratio = translate_time / duration
        
        print()
        print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {translate_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"   üìä –ú–ù–û–ñ–ò–¢–ï–õ–¨: {translate_ratio:.2f}x")
        print()
        
        if translate_ratio < 0.1:
            print("   üöÄ –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ!")
        elif translate_ratio < 0.3:
            print("   ‚ú® –ë—ã—Å—Ç—Ä–æ!")
        else:
            print("   üëç –ù–æ—Ä–º–∞–ª—å–Ω–æ")

# ============================================================================
# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
# ============================================================================

print()
print("=" * 70)
print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
print("=" * 70)
print()

# –¢–∏–ø–∏—á–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ CPU (M1)
typical_ratios = {
    "whisper_base": {
        "transcribe": 0.8,
        "quality": "‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ",
        "speed": "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ"
    },
    "whisper_small": {
        "transcribe": 1.5,
        "quality": "‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ",
        "speed": "‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ"
    }
}

print("–ú–æ–¥–µ–ª—å          | –ö–∞—á–µ—Å—Ç–≤–æ    | –°–∫–æ—Ä–æ—Å—Ç—å    | –ú–Ω–æ–∂–∏—Ç–µ–ª—å")
print("-" * 70)
for model_name, data in typical_ratios.items():
    current = "‚Üê –í–´ –¢–ï–°–¢–ò–†–£–ï–¢–ï" if model_name == MODEL else ""
    actual = f"(—É –≤–∞—Å: {transcribe_ratio:.2f}x)" if model_name == MODEL else ""
    print(f"{model_name:15} | {data['quality']:11} | {data['speed']:11} | "
          f"{data['transcribe']:.2f}x {actual:20} {current}")

print()
print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
print(f"   ‚Ä¢ whisper_base  - –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞")
print(f"   ‚Ä¢ whisper_small - –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (—Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—à–µ ~5%)")

# ============================================================================
# –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
# ============================================================================

print()
print("=" * 70)
print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
print("=" * 70)
print()

print(f"–ú–æ–¥–µ–ª—å: {MODEL}")
print(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {transcriber.device}")
print(f"–ê—É–¥–∏–æ: {duration:.1f} —Å–µ–∫")
print()
print("–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∂–µ–ª–µ–∑–∞:")
print(f"  ‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ ({MODEL}): {transcribe_ratio:.2f}x")
if translate_ratio > 0:
    print(f"  ‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥: {translate_ratio:.2f}x")
print()

print("=" * 70)
print("üîß –ö–ê–ö –û–ë–ù–û–í–ò–¢–¨ –ö–û–î")
print("=" * 70)
print()
print("–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: src/utils.py")
print("–ù–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é: estimate_processing_time")
print()
print("–û–±–Ω–æ–≤–∏—Ç–µ –Ω–∞ –≤–µ—Ä—Å–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
print()
print("```python")
print("def estimate_processing_time(")
print("    duration_seconds: float,")
print("    operation: str = \"transcribe\",")
print("    model: str = \"whisper_base\"  # ‚Üê –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä")
print(") -> str:")
print("    if operation == \"transcribe\":")
print("        # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
print("        multipliers = {")
print(f"            \"whisper_base\": {typical_ratios['whisper_base']['transcribe']:.2f},")
print(f"            \"whisper_small\": {typical_ratios['whisper_small']['transcribe']:.2f},")
print("        }")
print(f"        # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–∏ –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
print(f"        # multipliers = {{")
print(f"        #     \"whisper_base\": {transcribe_ratio:.2f},  # ‚Üê –í–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
print(f"        #     \"whisper_small\": X.XX,  # ‚Üê –ò–∑–º–µ—Ä—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ")
print(f"        # }}")
print("        estimated = duration_seconds * multipliers.get(model, 1.0)")
print("    else:  # translate")
if translate_ratio > 0:
    print(f"        estimated = duration_seconds * {translate_ratio:.2f}")
else:
    print(f"        estimated = duration_seconds * 0.15")
print("    ")
print("    minutes = int(estimated // 60)")
print("    if estimated < 60:")
print("        return \"–º–µ–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã\"")
print("    elif minutes == 1:")
print("        return \"–æ–∫–æ–ª–æ 1 –º–∏–Ω—É—Ç—ã\"")
print("    else:")
print("        return f\"–æ–∫–æ–ª–æ {minutes} –º–∏–Ω—É—Ç\"")
print("```")
print()

# ============================================================================
# –ü—Ä–∏–º–µ—Ä—ã –æ—Ü–µ–Ω–æ–∫
# ============================================================================

print("=" * 70)
print(f"üìà –ü–†–ò–ú–ï–†–´ –û–¶–ï–ù–û–ö ({MODEL})")
print("=" * 70)
print()

test_durations = [
    (30, "30 —Å–µ–∫—É–Ω–¥"),
    (60, "1 –º–∏–Ω—É—Ç–∞"),
    (180, "3 –º–∏–Ω—É—Ç—ã"),
    (600, "10 –º–∏–Ω—É—Ç"),
    (1800, "30 –º–∏–Ω—É—Ç"),
    (3600, "1 —á–∞—Å"),
    (7200, "2 —á–∞—Å–∞")
]

print("–î–ª—è –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é:")
print()
for seconds, label in test_durations:
    trans_est = seconds * transcribe_ratio
    trans_min = int(trans_est // 60)
    trans_sec = int(trans_est % 60)
    
    if translate_ratio > 0:
        transl_est = seconds * translate_ratio
        transl_min = int(transl_est // 60)
        transl_sec = int(transl_est % 60)
        total_est = trans_est + transl_est
        total_min = int(total_est // 60)
        total_sec = int(total_est % 60)
        
        print(f"{label:>10} ‚Üí —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {trans_min}:{trans_sec:02d}, "
              f"–ø–µ—Ä–µ–≤–æ–¥: {transl_min}:{transl_sec:02d}, "
              f"–ò–¢–û–ì–û: {total_min}:{total_sec:02d}")
    else:
        print(f"{label:>10} ‚Üí —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {trans_min}:{trans_sec:02d}")

print()
print("=" * 70)
print("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
print("=" * 70)

# ============================================================================
# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
# ============================================================================

print()
print("=" * 70)
print("üìã –¢–ê–ë–õ–ò–¶–ê –î–õ–Ø README")
print("=" * 70)
print()
print("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É –≤ README.md:")
print()

print("| –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å | –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ | –ü–µ—Ä–µ–≤–æ–¥ | –ò—Ç–æ–≥–æ |")
print("|--------------|-------------------|---------|-------|")

for seconds, label in test_durations:
    trans_est = seconds * transcribe_ratio
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    def format_time(secs):
        m = int(secs // 60)
        s = int(secs % 60)
        if secs < 60:
            return f"~{s} —Å–µ–∫"
        elif m < 5:
            return f"~{m}.{s//6} –º–∏–Ω"
        else:
            return f"~{m} –º–∏–Ω"
    
    trans_str = format_time(trans_est)
    
    if translate_ratio > 0:
        transl_est = seconds * translate_ratio
        transl_str = format_time(transl_est)
        total_est = trans_est + transl_est
        total_str = format_time(total_est)
        
        print(f"| {label:12} | {trans_str:17} | {transl_str:7} | {total_str:5} |")
    else:
        print(f"| {label:12} | {trans_str:17} | - | - |")

print()
print(f"–ú–Ω–æ–∂–∏—Ç–µ–ª–∏: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ={transcribe_ratio:.2f}x, –ø–µ—Ä–µ–≤–æ–¥={translate_ratio:.2f}x")

print()
print("üí° –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å?")
if MODEL == "whisper_base":
    print(f"   python calibrate.py whisper_small")
else:
    print(f"   python calibrate.py whisper_base")